[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar ReactiveDict;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// packages/reactive-dict/packages/reactive-dict.js                                            //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\n(function () {                                                                                 // 1\n                                                                                               // 2\n//////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                      //     // 4\n// packages/reactive-dict/reactive-dict.js                                              //     // 5\n//                                                                                      //     // 6\n//////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                        //     // 8\n// XXX come up with a serialization method which canonicalizes object key               // 1   // 9\n// order, which would allow us to use objects as values for equals.                     // 2   // 10\nvar stringify = function (value) {                                                      // 3   // 11\n  if (value === undefined)                                                              // 4   // 12\n    return 'undefined';                                                                 // 5   // 13\n  return EJSON.stringify(value);                                                        // 6   // 14\n};                                                                                      // 7   // 15\nvar parse = function (serialized) {                                                     // 8   // 16\n  if (serialized === undefined || serialized === 'undefined')                           // 9   // 17\n    return undefined;                                                                   // 10  // 18\n  return EJSON.parse(serialized);                                                       // 11  // 19\n};                                                                                      // 12  // 20\n                                                                                        // 13  // 21\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                     // 14  // 22\nReactiveDict = function (dictName) {                                                    // 15  // 23\n  // this.keys: key -> value                                                            // 16  // 24\n  if (dictName) {                                                                       // 17  // 25\n    if (typeof dictName === 'string') {                                                 // 18  // 26\n      // the normal case, argument is a string name.                                    // 19  // 27\n      // _registerDictForMigrate will throw an error on duplicate name.                 // 20  // 28\n      ReactiveDict._registerDictForMigrate(dictName, this);                             // 21  // 29\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};                       // 22  // 30\n    } else if (typeof dictName === 'object') {                                          // 23  // 31\n      // back-compat case: dictName is actually migrationData                           // 24  // 32\n      this.keys = dictName;                                                             // 25  // 33\n    } else {                                                                            // 26  // 34\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);                    // 27  // 35\n    }                                                                                   // 28  // 36\n  } else {                                                                              // 29  // 37\n    // no name given; no migration will be performed                                    // 30  // 38\n    this.keys = {};                                                                     // 31  // 39\n  }                                                                                     // 32  // 40\n                                                                                        // 33  // 41\n  this.keyDeps = {}; // key -> Dependency                                               // 34  // 42\n  this.keyValueDeps = {}; // key -> Dependency                                          // 35  // 43\n};                                                                                      // 36  // 44\n                                                                                        // 37  // 45\n_.extend(ReactiveDict.prototype, {                                                      // 38  // 46\n  set: function (key, value) {                                                          // 39  // 47\n    var self = this;                                                                    // 40  // 48\n                                                                                        // 41  // 49\n    value = stringify(value);                                                           // 42  // 50\n                                                                                        // 43  // 51\n    var oldSerializedValue = 'undefined';                                               // 44  // 52\n    if (_.has(self.keys, key)) oldSerializedValue = self.keys[key];                     // 45  // 53\n    if (value === oldSerializedValue)                                                   // 46  // 54\n      return;                                                                           // 47  // 55\n    self.keys[key] = value;                                                             // 48  // 56\n                                                                                        // 49  // 57\n    var changed = function (v) {                                                        // 50  // 58\n      v && v.changed();                                                                 // 51  // 59\n    };                                                                                  // 52  // 60\n                                                                                        // 53  // 61\n    changed(self.keyDeps[key]);                                                         // 54  // 62\n    if (self.keyValueDeps[key]) {                                                       // 55  // 63\n      changed(self.keyValueDeps[key][oldSerializedValue]);                              // 56  // 64\n      changed(self.keyValueDeps[key][value]);                                           // 57  // 65\n    }                                                                                   // 58  // 66\n  },                                                                                    // 59  // 67\n                                                                                        // 60  // 68\n  setDefault: function (key, value) {                                                   // 61  // 69\n    var self = this;                                                                    // 62  // 70\n    // for now, explicitly check for undefined, since there is no                       // 63  // 71\n    // ReactiveDict.clear().  Later we might have a ReactiveDict.clear(), in which case // 64  // 72\n    // we should check if it has the key.                                               // 65  // 73\n    if (self.keys[key] === undefined) {                                                 // 66  // 74\n      self.set(key, value);                                                             // 67  // 75\n    }                                                                                   // 68  // 76\n  },                                                                                    // 69  // 77\n                                                                                        // 70  // 78\n  get: function (key) {                                                                 // 71  // 79\n    var self = this;                                                                    // 72  // 80\n    self._ensureKey(key);                                                               // 73  // 81\n    self.keyDeps[key].depend();                                                         // 74  // 82\n    return parse(self.keys[key]);                                                       // 75  // 83\n  },                                                                                    // 76  // 84\n                                                                                        // 77  // 85\n  equals: function (key, value) {                                                       // 78  // 86\n    var self = this;                                                                    // 79  // 87\n                                                                                        // 80  // 88\n    // Mongo.ObjectID is in the 'mongo' package                                         // 81  // 89\n    var ObjectID = null;                                                                // 82  // 90\n    if (typeof Mongo !== 'undefined') {                                                 // 83  // 91\n      ObjectID = Mongo.ObjectID;                                                        // 84  // 92\n    }                                                                                   // 85  // 93\n                                                                                        // 86  // 94\n    // We don't allow objects (or arrays that might include objects) for                // 87  // 95\n    // .equals, because JSON.stringify doesn't canonicalize object key                  // 88  // 96\n    // order. (We can make equals have the right return value by parsing the            // 89  // 97\n    // current value and using EJSON.equals, but we won't have a canonical              // 90  // 98\n    // element of keyValueDeps[key] to store the dependency.) You can still use         // 91  // 99\n    // \"EJSON.equals(reactiveDict.get(key), value)\".                                    // 92  // 100\n    //                                                                                  // 93  // 101\n    // XXX we could allow arrays as long as we recursively check that there             // 94  // 102\n    // are no objects                                                                   // 95  // 103\n    if (typeof value !== 'string' &&                                                    // 96  // 104\n        typeof value !== 'number' &&                                                    // 97  // 105\n        typeof value !== 'boolean' &&                                                   // 98  // 106\n        typeof value !== 'undefined' &&                                                 // 99  // 107\n        !(value instanceof Date) &&                                                     // 100\n        !(ObjectID && value instanceof ObjectID) &&                                     // 101\n        value !== null)                                                                 // 102\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");                     // 103\n    var serializedValue = stringify(value);                                             // 104\n                                                                                        // 105\n    if (Tracker.active) {                                                               // 106\n      self._ensureKey(key);                                                             // 107\n                                                                                        // 108\n      if (! _.has(self.keyValueDeps[key], serializedValue))                             // 109\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;               // 110\n                                                                                        // 111\n      var isNew = self.keyValueDeps[key][serializedValue].depend();                     // 112\n      if (isNew) {                                                                      // 113\n        Tracker.onInvalidate(function () {                                              // 114\n          // clean up [key][serializedValue] if it's now empty, so we don't             // 115\n          // use O(n) memory for n = values seen ever                                   // 116\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())                // 117\n            delete self.keyValueDeps[key][serializedValue];                             // 118\n        });                                                                             // 119\n      }                                                                                 // 120\n    }                                                                                   // 121\n                                                                                        // 122\n    var oldValue = undefined;                                                           // 123\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                        // 124\n    return EJSON.equals(oldValue, value);                                               // 125\n  },                                                                                    // 126\n                                                                                        // 127\n  _ensureKey: function (key) {                                                          // 128\n    var self = this;                                                                    // 129\n    if (!(key in self.keyDeps)) {                                                       // 130\n      self.keyDeps[key] = new Tracker.Dependency;                                       // 131\n      self.keyValueDeps[key] = {};                                                      // 132\n    }                                                                                   // 133\n  },                                                                                    // 134\n                                                                                        // 135\n  // Get a JSON value that can be passed to the constructor to                          // 136\n  // create a new ReactiveDict with the same contents as this one                       // 137\n  _getMigrationData: function () {                                                      // 138\n    // XXX sanitize and make sure it's JSONible?                                        // 139\n    return this.keys;                                                                   // 140\n  }                                                                                     // 141\n});                                                                                     // 142\n                                                                                        // 143\n//////////////////////////////////////////////////////////////////////////////////////////     // 152\n                                                                                               // 153\n}).call(this);                                                                                 // 154\n                                                                                               // 155\n                                                                                               // 156\n                                                                                               // 157\n                                                                                               // 158\n                                                                                               // 159\n                                                                                               // 160\n(function () {                                                                                 // 161\n                                                                                               // 162\n//////////////////////////////////////////////////////////////////////////////////////////     // 163\n//                                                                                      //     // 164\n// packages/reactive-dict/migration.js                                                  //     // 165\n//                                                                                      //     // 166\n//////////////////////////////////////////////////////////////////////////////////////////     // 167\n                                                                                        //     // 168\nReactiveDict._migratedDictData = {}; // name -> data                                    // 1   // 169\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                              // 2   // 170\n                                                                                        // 3   // 171\nReactiveDict._loadMigratedDict = function (dictName) {                                  // 4   // 172\n  if (_.has(ReactiveDict._migratedDictData, dictName))                                  // 5   // 173\n    return ReactiveDict._migratedDictData[dictName];                                    // 6   // 174\n                                                                                        // 7   // 175\n  return null;                                                                          // 8   // 176\n};                                                                                      // 9   // 177\n                                                                                        // 10  // 178\nReactiveDict._registerDictForMigrate = function (dictName, dict) {                      // 11  // 179\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))                                    // 12  // 180\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);                        // 13  // 181\n                                                                                        // 14  // 182\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                        // 15  // 183\n};                                                                                      // 16  // 184\n                                                                                        // 17  // 185\nif (Meteor.isClient && Package.reload) {                                                // 18  // 186\n  // Put old migrated data into ReactiveDict._migratedDictData,                         // 19  // 187\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                        // 20  // 188\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');            // 21  // 189\n  if (migrationData && migrationData.dicts)                                             // 22  // 190\n    ReactiveDict._migratedDictData = migrationData.dicts;                               // 23  // 191\n                                                                                        // 24  // 192\n  // On migration, assemble the data from all the dicts that have been                  // 25  // 193\n  // registered.                                                                        // 26  // 194\n  Package.reload.Reload._onMigrate('reactive-dict', function () {                       // 27  // 195\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                                  // 28  // 196\n    var dataToMigrate = {};                                                             // 29  // 197\n                                                                                        // 30  // 198\n    for (var dictName in dictsToMigrate)                                                // 31  // 199\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();           // 32  // 200\n                                                                                        // 33  // 201\n    return [true, {dicts: dataToMigrate}];                                              // 34  // 202\n  });                                                                                   // 35  // 203\n}                                                                                       // 36  // 204\n                                                                                        // 37  // 205\n//////////////////////////////////////////////////////////////////////////////////////////     // 206\n                                                                                               // 207\n}).call(this);                                                                                 // 208\n                                                                                               // 209\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['reactive-dict'] = {}, {\n  ReactiveDict: ReactiveDict\n});\n\n})();\n","servePath":"/packages/reactive-dict.js"}]