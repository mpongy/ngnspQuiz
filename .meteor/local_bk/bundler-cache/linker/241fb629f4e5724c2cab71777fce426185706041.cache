[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar Session;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// packages/session/packages/session.js                                                        //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\n(function () {                                                                                 // 1\n                                                                                               // 2\n///////////////////////////////////////////////////////////////////////////////////////////    // 3\n//                                                                                       //    // 4\n// packages/session/session.js                                                           //    // 5\n//                                                                                       //    // 6\n///////////////////////////////////////////////////////////////////////////////////////////    // 7\n                                                                                         //    // 8\nSession = new ReactiveDict('session');                                                   // 1  // 9\n                                                                                         // 2  // 10\n// Documentation here is really awkward because the methods are defined                  // 3  // 11\n// elsewhere                                                                             // 4  // 12\n                                                                                         // 5  // 13\n/**                                                                                      // 6  // 14\n * @memberOf Session                                                                     // 7  // 15\n * @method set                                                                           // 8  // 16\n * @summary Set a variable in the session. Notify any listeners that the value has changed (eg: redraw templates, and rerun any [`Tracker.autorun`](#tracker_autorun) computations, that called [`Session.get`](#session_get) on this `key`.)\n * @locus Client                                                                         // 10\n * @param {String} key The key to set, eg, `selectedItem`                                // 11\n * @param {EJSONable | undefined} value The new value for `key`                          // 12\n */                                                                                      // 13\n                                                                                         // 14\n/**                                                                                      // 15\n * @memberOf Session                                                                     // 16\n * @method setDefault                                                                    // 17\n * @summary Set a variable in the session if it hasn't been set before. Otherwise works exactly the same as [`Session.set`](#session_set).\n * @locus Client                                                                         // 19\n * @param {String} key The key to set, eg, `selectedItem`                                // 20\n * @param {EJSONable | undefined} value The new value for `key`                          // 21\n */                                                                                      // 22\n                                                                                         // 23\n/**                                                                                      // 24\n * @memberOf Session                                                                     // 25\n * @method get                                                                           // 26\n * @summary Get the value of a session variable. If inside a [reactive computation](#reactivity), invalidate the computation the next time the value of the variable is changed by [`Session.set`](#session_set). This returns a clone of the session value, so if it's an object or an array, mutating the returned value has no effect on the value stored in the session.\n * @locus Client                                                                         // 28\n * @param {String} key The name of the session variable to return                        // 29\n */                                                                                      // 30\n                                                                                         // 31\n/**                                                                                      // 32\n * @memberOf Session                                                                     // 33\n * @method equals                                                                        // 34\n * @summary Test if a session variable is equal to a value. If inside a [reactive computation](#reactivity), invalidate the computation the next time the variable changes to or from the value.\n * @locus Client                                                                         // 36\n * @param {String} key The name of the session variable to test                          // 37\n * @param {String | Number | Boolean | null | undefined} value The value to test against // 38\n */                                                                                      // 39\n                                                                                         // 40\n///////////////////////////////////////////////////////////////////////////////////////////    // 49\n                                                                                               // 50\n}).call(this);                                                                                 // 51\n                                                                                               // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.session = {}, {\n  Session: Session\n});\n\n})();\n","servePath":"/packages/session.js"}]